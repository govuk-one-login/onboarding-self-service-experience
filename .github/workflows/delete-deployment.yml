name: Delete deployment

on:
  workflow_dispatch:
  schedule:
    # Every weekday at 10am
    - cron: '0 10 * * 1-5'
  pull_request:
    types: [ closed ]

concurrency:
  group: deploy-${{ github.head_ref || github.ref_name }}

jobs:
  delete-paas-deployment:
    name: Delete app preview
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: PaaS login
        uses: alphagov/di-github-actions/paas/log-in-to-paas@6313465e0c640aff9e5f7631dc1e6f70d253dce2
        with:
          cf-org-name: gds-digital-identity-onboarding
          cf-space-name: self-service-preview
          cf-username: ${{ secrets.CF_USERNAME }}
          cf-password: ${{ secrets.CF_PASSWORD }}

      - name: Get app name
        if: ${{ github.event_name != 'schedule' }}
        uses: alphagov/di-github-actions/beautify-branch-name@6313465e0c640aff9e5f7631dc1e6f70d253dce2
        with:
          downcase: true
          length-limit: 63
          underscores-to-hyphens: true
          prefix: di-sse-prev
          set-env-var: APP_NAME
          usage: App name

      - name: Delete app
        if: ${{ github.event_name != 'schedule' }}
        run: cf delete "$APP_NAME" -rf

      - name: Clean up stale deployments
        if: ${{ github.event_name == 'schedule' }}
        uses: alphagov/di-github-actions/paas/delete-stale-apps@6313465e0c640aff9e5f7631dc1e6f70d253dce2
        with:
          age-threshold-days: 30

  delete-fargate-deployment:
    name: Delete Fargate deployment
    runs-on: ubuntu-latest
    environment: development
    if: ${{ github.event_name == 'schedule' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.GHA_AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Clean up stale task definitions
        run: |
          task_definitions=$(aws ecs list-task-definitions --status ACTIVE --query "taskDefinitionArns" --output text)
          read -ra task_definitions <<< "$task_definitions"
          
          for task_definition in "${task_definitions[@]}"; do
            image=$(aws ecs describe-task-definition \
              --task-definition "$task_definition" \
              --query "taskDefinition.containerDefinitions[?name=='self-service-frontend'].image" \
              --output text)
          
            image_tag="${image##*:}"
          
            if ! aws ecr describe-images \
              --repository-name self-service/frontend \
              --image-ids imageTag="$image_tag" > /dev/null; then
          
              read -r family revision < <(aws ecs describe-task-definition \
                --task-definition "$task_definition" \
                --query "taskDefinition.[family, revision]" \
                --output text)
          
              aws ecs deregister-task-definition --task-definition "$task_definition"
              echo "Deregistered task definition \`$family:$revision\` for image \`$image_tag\`"
            fi
          done
