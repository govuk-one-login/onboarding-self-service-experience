AWSTemplateFormatVersion: "2010-09-09"
Description: DI Admin Tool frontend
Transform: AWS::LanguageExtensions

Parameters:
  ImageURI:
    Type: String
    Default: ""
    Description: The URI of the ECR image to use for the container
  ContainerPort:
    Type: Number
    Default: 3000
  LogGroupPrefix:
    Type: String
    AllowedPattern: ^.*[^\/]$
    Default: /aws/vendedlogs
  DeploymentName:
    Type: String
    MaxLength: 28
    AllowedPattern: ^.*[^-]$
    Default: self-service
    Description: A unique prefix to identify the deployment; used when importing or exporting values from related stacks
  ShowTestBanner:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /self-service/frontend/show-test-banner
  GoogleTagID:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /self-service/frontend/google-tag-id
  PermissionsBoundary:
    Type: String
    Default: ""
    Description: The ARN of the permissions boundary to apply when creating IAM roles

Mappings:
  # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancer:
    eu-west-2:
      AccountID: 652711504416

Conditions:
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, "" ] ]

Resources:

  #--- Fargate / ECS ---#

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities: [ FARGATE ]
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Cpu: 256
      Memory: 512
      Family: !Sub ${DeploymentName}
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: self-service-frontend
          Image: !Ref ImageURI
          Environment:
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: TEST_BANNER
              Value: !Ref ShowTestBanner
            - Name: GOOGLE_TAG_ID
              Value: !Ref GoogleTagID
            - Name: SESSION_SECRET
              Value: "{{resolve:secretsmanager:/self-service/frontend/session-secret}}"
            - Name: SESSIONS_TABLE
              Value:
                Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-SessionsTableName
            - Name: API_BASE_URL
              Value:
                Fn::ImportValue: !Sub ${DeploymentName}-API-BaseURL
            - Name: COGNITO_USER_POOL_ID
              Value:
                Fn::ImportValue: !Sub ${DeploymentName}-Cognito-UserPoolID
            - Name: COGNITO_CLIENT_ID
              Value:
                Fn::ImportValue: !Sub ${DeploymentName}-Cognito-UserPoolClientID
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          HealthCheck:
            Command: [ "CMD", "wget", "--spider", !Sub "http://localhost:${ContainerPort}" ]
          LogConfiguration:
            # https://docs.docker.com/config/containers/logging/awslogs/
            LogDriver: awslogs
            Options:
              # Consider lines not starting with whitespace as a multi-line log message boundary
              awslogs-multiline-pattern: ^[^\s}]+.*$
              awslogs-group: !Sub ${LogGroupPrefix}/${DeploymentName}/frontend
              awslogs-stream-prefix: ecs
              awslogs-create-group: true
              awslogs-region: !Ref AWS::Region

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Grant the Fargate and ECS container agents permissions to make AWS API calls and access ECR
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      ManagedPolicyArns: [ arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: CreateLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupPrefix}/${DeploymentName}/frontend*

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow the Frontend application tasks to access AWS services
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
      Policies:
        # https://github.com/ca98am79/connect-dynamodb#iam-permissions
        - PolicyName: SessionStorageTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                Resource:
                  Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-SessionsTableARN
        - PolicyName: Cognito
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminSetUserMFAPreference
                  - cognito-idp:AdminRespondToAuthChallenge
                Resource:
                  Fn::ImportValue: !Sub ${DeploymentName}-Cognito-UserPoolARN

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref DeploymentName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ContainerService:
    Type: AWS::ECS::Service
    DependsOn: ApplicationLoadBalancerListener
    Properties:
      ServiceName: self-service-frontend
      Cluster: !GetAtt FargateCluster.Arn
      TaskDefinition: !Ref TaskDefinition
      PropagateTags: SERVICE
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: self-service-frontend
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ApplicationTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [ ",", !ImportValue VPC-ProtectedSubnets ]
          SecurityGroups: [ !GetAtt ContainerServiceSecurityGroup.GroupId ]

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPC-ID
      GroupDescription: Frontend container service access
      SecurityGroupIngress:
        - Description: Allow traffic from the application load balancer
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName}-frontend-container-service

  #--- Application load balancing ---#

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AccessLogsBucketPolicy
    Properties:
      Type: application
      Scheme: internal
      Name: !Sub ${DeploymentName}-frontend
      Subnets: !Split [ ",", !ImportValue VPC-ProtectedSubnets ]
      SecurityGroups: [ !Ref ApplicationSecurityGroup ]
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${DeploymentName}-app
      VpcId: !ImportValue VPC-ID
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip

  ApplicationLoadBalancerListener:
    # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS
    # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPC-ID
      GroupDescription: Frontend application load balancer
      SecurityGroupIngress:
        - Description: Allow traffic from the VPC
          CidrIp: !ImportValue VPC-CIDR
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName}-frontend-application-load-balancer

  ApplicationSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationSecurityGroup.GroupId
      Description: Allow traffic to the frontend container service
      DestinationSecurityGroupId: !GetAtt ContainerServiceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort

  AccessLogsBucket:
    # checkov:skip=CKV_AWS_18:Ensure the S3 bucket has access logging enabled
    # checkov:skip=CKV_AWS_21:Ensure the S3 bucket has versioning enabled
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - ${DeploymentName}-application-access-logs-${ID}
        - ID: !Select [ 0, !Split [ "-", !Select [ 2, !Split [ "/", !Ref AWS::StackId ] ] ] ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
            Principal:
              AWS: !FindInMap [ ElasticLoadBalancer, !Ref AWS::Region, AccountID ]

  #--- Network load balancing ---#

  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${DeploymentName}-net
      VpcId: !ImportValue VPC-ID
      TargetType: alb
      Protocol: TCP
      Port: 80
      Targets:
        -Id: !Ref ApplicationLoadBalancer

  NetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: TCP
      LoadBalancerArn: !ImportValue VPC-NetworkLoadBalancerARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup

  #--- Public access / API Gateway ---#

  PublicAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${DeploymentName}-frontend
      ProtocolType: HTTP

  APIProxy:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PublicAPI
      RouteKey: ANY /{proxy+}
      Target: !Sub integrations/${VPCLinkIntegration}

  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref PublicAPI
      StageName: $default
      AutoDeploy: true
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
      AccessLogSettings:
        DestinationArn: !GetAtt APIAccessLogsGroup.Arn
        Format:
          Fn::ToJsonString:
            path: $context.path
            status: $context.status
            protocol: $context.protocol
            routeKey: $context.routeKey
            requestId: $context.requestId
            requestTime: $context.requestTime
            httpMethod: $context.httpMethod
            responseLength: $context.responseLength
            extendedRequestId: $context.extendedRequestId
            integrationStatus: $context.integration.status
            integrationError: $context.integration.error
            customDomainPath: $context.customDomain.basePathMatched

  APIAccessLogsGroup:
    # checkov:skip=CKV_AWS_158:Ensure that CloudWatch Log Group is encrypted by KMS
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${LogGroupPrefix}/${DeploymentName}/frontend/api-gateway
      RetentionInDays: 14

  VPCLinkIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PublicAPI
      PayloadFormatVersion: 1.0
      IntegrationMethod: ANY
      IntegrationType: HTTP_PROXY
      IntegrationUri: !Ref NetworkLoadBalancerListener
      ConnectionId: !ImportValue VPC-LinkID
      ConnectionType: VPC_LINK

  #--- CDN ---#

  CloudFrontDistribution:
    # checkov:skip=CKV_AWS_68:CloudFront Distribution should have WAF enabled
    # checkov:skip=CKV_AWS_174:Verify CloudFront Distribution Viewer Certificate is using TLS v1.2
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Comment: !Ref DeploymentName
        Logging:
          Prefix: CloudFront
          Bucket: !GetAtt CloudFrontAccessLogsBucket.DomainName
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultCacheBehavior:
          CachePolicyId: !Ref CachePolicy
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: !Sub ${DeploymentName}-frontend
          AllowedMethods: [ GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS ]
        Origins:
          - Id: !Sub ${DeploymentName}-frontend
            DomainName: !Sub ${PublicAPI}.execute-api.${AWS::Region}.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [ TLSv1.2 ]

  CachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub ${DeploymentName}-NoHeaders
        MinTTL: 1
        MaxTTL: 31536000
        DefaultTTL: 86400
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          CookiesConfig:
            CookieBehavior: all
          QueryStringsConfig:
            QueryStringBehavior: all

  CloudFrontAccessLogsBucket:
    # checkov:skip=CKV_AWS_18:Ensure the S3 bucket has access logging enabled
    # checkov:skip=CKV_AWS_21:Ensure the S3 bucket has versioning enabled
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - ${DeploymentName}-cloudfront-access-logs-${ID}
        - ID: !Select [ 0, !Split [ "-", !Select [ 2, !Split [ "/", !Ref AWS::StackId ] ] ] ]
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html
  CloudFrontAccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudFrontAccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: !GetAtt CloudFrontAccessLogsBucket.Arn
            Action:
              - s3:GetBucketAcl
              - s3:PutBucketAcl
            Principal:
              AWS: !Ref AWS::AccountId

Outputs:
  APIGatewayURL:
    Value: !GetAtt PublicAPI.ApiEndpoint
  CloudFrontURL:
    Value: !GetAtt CloudFrontDistribution.DomainName
