AWSTemplateFormatVersion: "2010-09-09"
Description: DI Admin Tool frontend
Transform: AWS::LanguageExtensions

Parameters:
  ImageURI:
    Type: String
    Default: ""
    Description: The URI of the ECR image to use for the container
  ContainerPort:
    Type: Number
    Default: 3000
  LogGroupPrefix:
    Type: String
    AllowedPattern: ^.*[^\/]$
    Default: /aws/vendedlogs
  DeploymentName:
    Type: String
    MaxLength: 28
    AllowedPattern: ^.*[^-]$
    Default: self-service
    Description: A unique prefix to identify the deployment; used when importing or exporting values from related stacks
  ShowTestBanner:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /self-service/frontend/show-test-banner
  GoogleTagID:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /self-service/frontend/google-tag-id
  PermissionsBoundary:
    Type: String
    Default: ""
    Description: The ARN of the permissions boundary to apply when creating IAM roles
  Environment:
    Description: "The name of the environment to deploy to."
    Type: "String"
    Default: dev
    AllowedValues:
    - "dev"
    - "build"
    - "staging"
    - "integration"
    - "production"

Conditions:
  Subdomain: !Not [ !Equals [ !Ref DeploymentName, self-service ] ]
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, "" ] ]

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables

Resources:

  #--- Fargate / ECS ---#

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities: [ FARGATE ]
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Cpu: 256
      Memory: 512
      Family: !Sub ${DeploymentName}-frontend
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: self-service-frontend
          Image: !Ref ImageURI
          Environment:
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: TEST_BANNER
              Value: !Ref ShowTestBanner
            - Name: GOOGLE_TAG_ID
              Value: !Ref GoogleTagID
            - Name: SESSION_SECRET
              Value: "{{resolve:secretsmanager:/self-service/frontend/session-secret}}"
            - Name: SESSIONS_TABLE
              Value:
                Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-SessionsTableName
            - Name: API_BASE_URL
              Value:
                Fn::ImportValue: !Sub ${DeploymentName}-API-BaseURL
            - Name: COGNITO_USER_POOL_ID
              Value:
                Fn::ImportValue: !Sub ${DeploymentName}-Cognito-UserPoolID
            - Name: COGNITO_CLIENT_ID
              Value:
                Fn::ImportValue: !Sub ${DeploymentName}-Cognito-UserPoolClientID
            - Name: DT_LOGLEVELCON
              Value: INFO
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          HealthCheck:
            Command: [ "CMD", "wget", "--spider", !Sub "http://localhost:${ContainerPort}" ]
          LogConfiguration:
            # https://docs.docker.com/config/containers/logging/awslogs/
            LogDriver: awslogs
            Options:
              # Consider lines not starting with whitespace as a multi-line log message boundary
              awslogs-multiline-pattern: ^[^\s}]+.*$
              awslogs-group: !Sub ${LogGroupPrefix}/${DeploymentName}/frontend
              awslogs-stream-prefix: ecs
              awslogs-create-group: true
              awslogs-region: !Ref AWS::Region
          Secrets:
            - Name: DT_TENANT
              ValueFrom: !Join
                - ''
                - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
                  - ':DT_TENANT::'
            - Name: DT_TENANTTOKEN
              ValueFrom: !Join
                - ''
                - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
                  - ':DT_TENANTTOKEN::'
            - Name: DT_CONNECTION_POINT
              ValueFrom: !Join
              - ''
              - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
                - ':DT_CONNECTION_POINT::'

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Grant the Fargate and ECS container agents permissions to make AWS API calls and access ECR
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      ManagedPolicyArns: [ arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: CreateLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupPrefix}/${DeploymentName}/frontend*
        - PolicyName: GetDynatraceSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: arn:aws:secretsmanager:eu-west-2:216552277552:secret:*
              - Effect: Allow
                Action: secretsmanager:ListSecrets
                Resource: arn:aws:secretsmanager:eu-west-2:216552277552:secret:*
              - Effect: Allow
                Action: kms:Decrypt
                Resource: arn:aws:kms:eu-west-2:216552277552:key/*

            

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow the Frontend application tasks to access AWS services
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
      Policies:
        # https://github.com/ca98am79/connect-dynamodb#iam-permissions
        - PolicyName: SessionStorageTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                Resource:
                  Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-SessionsTableARN
        - PolicyName: Cognito
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminSetUserMFAPreference
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AddCustomAttributes
                  - cognito-idp:UpdateUserPoolClient
                Resource:
                  Fn::ImportValue: !Sub ${DeploymentName}-Cognito-UserPoolARN

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${DeploymentName}-frontend
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ContainerService:
    Type: AWS::ECS::Service
    DependsOn: ApplicationLoadBalancerListener
    Properties:
      ServiceName: self-service-frontend
      Cluster: !GetAtt FargateCluster.Arn
      TaskDefinition: !Ref TaskDefinition
      PropagateTags: SERVICE
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: self-service-frontend
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ApplicationTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [ ",", !ImportValue VPC-ProtectedSubnets ]
          SecurityGroups: [ !GetAtt ContainerServiceSecurityGroup.GroupId ]

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPC-ID
      GroupDescription: Frontend container service access
      SecurityGroupIngress:
        - Description: Allow traffic from the application load balancer
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName}-frontend-container-service


  #--- WAF ---#

    FrontendWebAcl:
      Type: 'AWS::WAFv2::WebACL'
      Properties:
        Description: Web ACL for Frontend API Gateway
        Name: !Sub '${AWS::StackName}-${Environment}-acl'
        DefaultAction:
          Allow: { }

        Rules:
          - Name: AWS-CRS
            Priority: 0
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesCommonRuleSet
                ExcludedRules:
                  - Name: CrossSiteScripting_BODY
                  - Name: CrossSiteScripting_COOKIE
                  - Name: CrossSiteScripting_QUERYARGUMENTS
                  - Name: CrossSiteScripting_URIPATH
                  - Name: EC2MetaDataSSRF_BODY
                  - Name: EC2MetaDataSSRF_COOKIE
                  - Name: EC2MetaDataSSRF_QUERYARGUMENTS
                  - Name: EC2MetaDataSSRF_URIPATH
                  - Name: GenericLFI_BODY
                  - Name: GenericLFI_QUERYARGUMENTS
                  - Name: GenericLFI_URIPATH
                  - Name: GenericRFI_BODY
                  - Name: GenericRFI_QUERYARGUMENTS
                  - Name: GenericRFI_URIPATH
                  - Name: NoUserAgent_HEADER
                  - Name: RestrictedExtensions_QUERYARGUMENTS
                  - Name: RestrictedExtensions_URIPATH
                  - Name: SizeRestrictions_BODY
                  - Name: SizeRestrictions_Cookie_HEADER
                  - Name: SizeRestrictions_QUERYSTRING
                  - Name: SizeRestrictions_URIPATH
                  - Name: UserAgent_BadBots_HEADER
            OverrideAction:
              None: { }
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub '${AWS::StackName}-${Environment}-aws-crs-metric'

          - Name: Bad-Inputs
            Priority: 1
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesKnownBadInputsRuleSet
                ExcludedRules:
                  - Name: ExploitablePaths_URIPATH
                  - Name: Host_localhost_HEADER
                  - Name: JavaDeserializationRCE_BODY
                  - Name: JavaDeserializationRCE_HEADER
                  - Name: JavaDeserializationRCE_QUERYSTRING
                  - Name: JavaDeserializationRCE_URIPATH
                  # - Name: Log4JRCE
                  - Name: PROPFIND_METHOD
            OverrideAction:
              None: { }
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub '${AWS::StackName}-${Environment}-bad-inputs-metric'

          - Name: Anonymous-IpList
            Priority: 2
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesAnonymousIpList
                ExcludedRules:
                  - Name: AnonymousIPList
                  - Name: HostingProviderIPList
            OverrideAction:
              None: { }
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub '${AWS::StackName}-${Environment}-anonymous-iplist-metric'

          - Name: SQLInject-RuleSet
            Priority: 3
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesSQLiRuleSet
                ExcludedRules:
                  - Name: SQLiExtendedPatterns_QUERYARGUMENTS
                  - Name: SQLi_BODY
                  - Name: SQLi_COOKIE
                  - Name: SQLi_QUERYARGUMENTS
                  - Name: SQLi_URIPATH
            OverrideAction:
              None: { }
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub '${AWS::StackName}-${Environment}-SQLinjection-ruleset-metric'

          - Name: RateBased-CountIpRule
            Priority: 4
            Statement:
              RateBasedStatement:
                Limit: 100
                AggregateKeyType: IP
            Action:
              Count: { }
            VisibilityConfig:
              CloudWatchMetricsEnabled: true
              MetricName: !Sub "${AWS::StackName}-${Environment}-RateBased-CountIp-ruleset-metric"
              SampledRequestsEnabled: true


  #--- Application load balancing ---#

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Name: !Sub ${DeploymentName}-app
      Subnets: !Split [ ",", !ImportValue VPC-InternetSubnets ]
      SecurityGroups: [ !Ref ApplicationSecurityGroup ]
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !ImportValue ELB-AccessLogsBucket

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !If [ Subdomain, DNS-SubdomainCertificateARN, DNS-CertificateARN ]
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationTargetGroup
          Type: forward

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${DeploymentName}-ecs
      VpcId: !ImportValue VPC-ID
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPC-ID
      GroupDescription: Frontend application load balancer
      SecurityGroupIngress:
        - Description: Allow secure traffic from the internet
          CidrIp: 0.0.0.0/0     # Any IPv4 address
          IpProtocol: tcp
          FromPort: 443         # HTTPS
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${DeploymentName}-frontend-application-load-balancer

  ApplicationSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationSecurityGroup.GroupId
      Description: Allow traffic to the frontend container service
      DestinationSecurityGroupId: !GetAtt ContainerServiceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort

  #--- DNS ---#

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Sub
        - ${Name}${Domain}
        - Name: !If [ Subdomain, !Sub "${DeploymentName}.", ""]
          Domain: !ImportValue DNS-Domain
      HostedZoneId: !ImportValue DNS-HostedZoneID
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: false

Outputs:
  AdminToolURL:
    Value: !Sub https://${DNSRecord}
