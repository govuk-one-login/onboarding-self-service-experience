AWSTemplateFormatVersion: "2010-09-09"
Description: Admin Tool VPC and networking components to provide security controls and public access to the app

Parameters:
  # ADR in review https://github.com/alphagov/digital-identity-architecture/pull/491
  InternetSubnets:
    Type: List<String>
    Default: ""
    Description: Temporary param to export the firewall subnet IDs until they're exported from the VPC stack
  ExportPrefix:
    Type: String
    AllowedPattern: ^.*-$|^$
    Default: ""
    Description: Optional prefix to apply to the exports
  TemplateStorageBucket:
    Type: String
    Default: https://template-storage-templatebucket-1upzyw6v9cs42.s3.amazonaws.com

Mappings:
  # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancer:
    eu-west-2:
      AccountID: 652711504416

Conditions:
  FirewallSubnets: !Not [ !Equals [ !Join [ "", !Ref InternetSubnets ], "" ] ]

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/vpc/template.yaml
      Parameters:
        ECRApiEnabled: "Yes"
        KMSApiEnabled: "Yes"
        SNSApiEnabled: "Yes"
        LogsApiEnabled: "Yes"
        StatesApiEnabled: "Yes"
        DynamoDBApiEnabled: "Yes"
        ExecuteApiGatewayEnabled: "Yes"
        SQSApiEnabled: "Yes"
        AccessLogsCustomBucketNameEnabled: "No"
        AvailabilityZoneCount: 2
        AllowedDomains: !Join [ ",", [
          !Sub "cognito-idp.${AWS::Region}.amazonaws.com",
          api.notifications.service.gov.uk,
          "*.cloudfront.net"
        ] ]
        AllowRules: !Sub >
          pass tls $HOME_NET any -> $EXTERNAL_NET 443 (tls.sni; content:"cognito-idp.${AWS::Region}.amazonaws.com";
          startswith; endswith; msg:"Pass TLS to Cognito"; flow:established; rev:1; sid:2001;)
          
          pass tls $HOME_NET any -> $EXTERNAL_NET 443 (tls.sni; content:"api.notifications.service.gov.uk";
          startswith; endswith; msg:"Pass TLS to Notify API"; flow:established; rev:1; sid:2002;)
          
          pass tls $HOME_NET any -> $EXTERNAL_NET 443 (tls.sni; content:".cloudfront.net";
          endswith; msg:"Pass TLS to CloudFront"; flow:established; rev:1; sid:2003;)

  AccessLogsBucket:
    # checkov:skip=CKV_AWS_18:Ensure the S3 bucket has access logging enabled
    # checkov:skip=CKV_AWS_21:Ensure the S3 bucket has versioning enabled
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - admin-tool-elb-access-logs-${ID}
        - ID: !Select [ 0, !Split [ "-", !Select [ 2, !Split [ "/", !Ref AWS::StackId ] ] ] ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
            Principal:
              AWS: !FindInMap [ ElasticLoadBalancer, !Ref AWS::Region, AccountID ]

Outputs:
  VPCID:
    Value: !GetAtt VPC.Outputs.VpcId
    Export:
      Name: !Sub ${ExportPrefix}VPC-ID
  VPCStackName:
    Value: !Select [ 1, !Split [ "/", !Ref VPC ] ]
    Export:
      Name: !Sub ${ExportPrefix}VPC-StackName
  PrivateSubnets:
    Value: !Join [ ",", [ !GetAtt VPC.Outputs.PrivateSubnetIdA, !GetAtt VPC.Outputs.PrivateSubnetIdB ] ]
    Export:
      Name: !Sub ${ExportPrefix}VPC-PrivateSubnets
  ProtectedSubnets:
    Value: !Join [ ",", [ !GetAtt VPC.Outputs.ProtectedSubnetIdA, !GetAtt VPC.Outputs.ProtectedSubnetIdB ] ]
    Export:
      Name: !Sub ${ExportPrefix}VPC-ProtectedSubnets
  InternetSubnets:
    Condition: FirewallSubnets
    Value: !Join [ ",", !Ref InternetSubnets ]
    Export:
      Name: !Sub ${ExportPrefix}VPC-InternetSubnets
  ExecuteAPIGatewayVPCEndpointID:
    Value: !GetAtt VPC.Outputs.ExecuteApiGatewayVpcEndpointId
    Export:
      Name: !Sub ${ExportPrefix}VPC-ExecuteAPIGatewayEndpointID
  VPCEndpointsSecurityGroup:
    Value: !GetAtt VPC.Outputs.AWSServicesEndpointSecurityGroupId
    Export:
      Name: !Sub ${ExportPrefix}VPC-VPCEndpointsSecurityGroup
  AccessLogsBucket:
    Value: !Ref AccessLogsBucket
    Export:
      Name: !Sub ${ExportPrefix}ELB-AccessLogsBucket
