AWSTemplateFormatVersion: "2010-09-09"
Description: AWS config to deploy Admin Tool local stacks from dev machines and preview stacks from GitHub Actions
Transform: AWS::LanguageExtensions

Parameters:
  GitHubOrg:
    Type: String
    Default: govuk-one-login
  GitHubRepo:
    Type: String
    Default: onboarding-self-service-experience
  PreviewStacksPrefix:
    Type: String
    Default: preview
  ServiceName:
    Type: String
    Default: self-service
  NotificationsEmail:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /self-service/api/notifications-email

Resources:
  # Service authorisation reference - Actions, resources, and condition keys for AWS services
  # https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html
  GitHubActionsRole:
    # checkov:skip=CKV_AWS_109:Ensure IAM policies does not allow permissions management without constraints
    # checkov:skip=CKV_AWS_111:Ensure IAM policies does not allow write access without constraints
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !Ref GitHubOIDCProvider
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrg}/${GitHubRepo}:*
      Policies:
        - PolicyName: GitHubActions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - iam:ListPolicies
                  - iam:GetPolicy
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - s3:CreateBucket
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:PutPublicAccessBlock
                  - s3:PutBucketPublicAccessBlock
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - kms:DeleteAlias
                  - wafv2:DisassociateWebACL

              - Effect: Allow
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
                Action:
                  - cognito-idp:AssociateWebACL
                  - cognito-idp:DisassociateWebACL
                  - cognito-idp:GetWebACLForResource
                  - cognito-idp:ListResourcesForWebACL
                  - cognito-idp:DescribeUserPool

              - Effect: Allow
                Resource: !GetAtt GitHubDeploymentArtifactsBucket.Arn
                Action: s3:ListBucket

              - Effect: Allow
                Resource: !Sub ${GitHubDeploymentArtifactsBucket.Arn}/sse-preview/*
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject

              - Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/LanguageExtensions
                Action: cloudformation:CreateChangeSet

              - Effect: Allow
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PreviewStacksPrefix}-*
                Action:
                  - dynamodb:UpdateContinuousBackups

              - Effect: Allow
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${PreviewStacksPrefix}-*
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplateSummary
                  - cloudformation:GetTemplate
                  - cloudformation:DeleteStack

              - Effect: Allow
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PreviewStacksPrefix}-*
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - ssm:AddTagsToResource

              - Effect: Allow
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${PreviewStacksPrefix}-*
                Action:
                  - sqs:CreateQueue
                  - sqs:DeleteQueue
                  - sqs:TagQueue
                  - sqs:GetQueueAttributes
                  - sqs:SetQueueAttributes

              - Effect: Allow
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ServiceName}/*
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath

              - Effect: Allow
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
                Action:
                  - kms:Encrypt
                  - kms:CreateKey
                  - kms:EnableKeyRotation
                  - kms:DescribeKey
                  - kms:PutKeyPolicy
                  - kms:TagResource
                  - kms:CreateGrant
                  - kms:ScheduleKeyDeletion
                  - kms:CreateAlias
                  - kms:DeleteAlias

              - Effect: Allow
                Resource: !Sub arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:regional/*
                Action:
                  - wafv2:CreateWebACL
                  - wafv2:DeleteWebACL
                  - wafv2:AssociateWebACL
                  - wafv2:GetWebACL
                  - wafv2:ListWebACLs
                  - wafv2:ListTagsForResource
                  - wafv2:GetWebACLForResource

              - Effect: Allow
                Resource: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/*
                Action:
                  - elasticloadbalancing:SetWebACL

              - Effect: Allow
                Resource:
                  - !Sub arn:aws:apigateway:${AWS::Region}::/restapis/*
                Action:
                  - apigateway:SetWebACL

  FrontendDeploymentPolicy:
    # checkov:skip=CKV_AWS_111:Ensure IAM policies does not allow write access without constraints
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles: [ !Ref GitHubActionsRole ]
      ManagedPolicyName: DeployFrontend
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ecr:DescribeRegistry
              - ecr:GetAuthorizationToken
              - ec2:DescribeSecurityGroups
              - ec2:CreateSecurityGroup
              - ec2:DeleteSecurityGroup
              - ecs:CreateCluster
              - ecs:ListTaskDefinitions
              - ecs:DescribeTaskDefinition
              - ecs:RegisterTaskDefinition
              - ecs:DeregisterTaskDefinition
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeLoadBalancers
              - route53:GetHostedZone
              - route53:GetChange
              - kms:CreateAlias

          - Effect: Allow
            Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ServiceName}/frontend
            Action:
              - ecr:InitiateLayerUpload
              - ecr:CompleteLayerUpload
              - ecr:UploadLayerPart
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchDeleteImage
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:ListImages
              - ecr:PutImage

          - Effect: Allow
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${PreviewStacksPrefix}-frontend-*
            Action:
              - iam:GetRole
              - iam:TagRole
              - iam:PassRole
              - iam:UntagRole
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRolePolicy
              - iam:PutRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:DeleteRolePolicy
            Condition:
              StringEqualsIfExists:
                iam:PassedToService: ecs-tasks.amazonaws.com
              ArnLikeIfExists:
                iam:AssociatedResourceARN: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${PreviewStacksPrefix}-*

          - Effect: Allow
            Resource:
              - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${PreviewStacksPrefix}-*
              - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${PreviewStacksPrefix}-*/${ServiceName}-frontend
            Action:
              - ecs:CreateService
              - ecs:UpdateService
              - ecs:DeleteService
              - ecs:DescribeServices
              - ecs:DescribeClusters
              - ecs:DeleteCluster

          - Effect: Allow
            Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
            Action:
              - ec2:CreateTags
              - ec2:DeleteSecurityGroup
              - ec2:RevokeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
            Condition:
              StringLike:
                aws:ResourceTag/aws:cloudformation:stack-name: !Sub ${PreviewStacksPrefix}-frontend-*

          - Effect: Allow
            Resource: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${PreviewStacksPrefix}-*-ecs/*
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:CreateTargetGroup
              - elasticloadbalancing:DeleteTargetGroup

          - Effect: Allow
            Resource: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/${PreviewStacksPrefix}-*-app/*
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:ModifyLoadBalancerAttributes

          - Effect: Allow
            Resource: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/${PreviewStacksPrefix}-*-app/*
            Action: elasticloadbalancing:DeleteListener

          - Effect: Allow
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${ServiceName}/frontend/session-secret-*
            Action: secretsmanager:GetSecretValue

          - Effect: Allow
            Resource: arn:aws:route53:::hostedzone/*
            Action: route53:ChangeResourceRecordSets
            Condition:
              ForAllValues:StringEquals:
                route53:ChangeResourceRecordSetsRecordTypes: A
              ForAllValues:StringLike:
                route53:ChangeResourceRecordSetsNormalizedRecordNames: !Sub [ "*.${Domain}", { Domain: !ImportValue DNS-Domain } ]

  ApiDeploymentPolicy:
    # checkov:skip=CKV_AWS_111:Ensure IAM policies does not allow write access without constraints
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles: [ !Ref GitHubActionsRole ]
      ManagedPolicyName: DeployAPI
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - logs:DescribeLogGroups
              - logs:TagResource
              - logs:CreateLogGroup
              - logs:DeleteLogGroup
              - logs:PutRetentionPolicy
              - logs:CreateLogDelivery
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies

          - Effect: Allow
            Resource: arn:aws:logs:::log-group:*:*
            Action:
              - logs:PutDataProtectionPolicy
              - logs:DeleteDataProtectionPolicy
              - logs:GetDataProtectionPolicy
              - logs:Unmask

          - Effect: Allow
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${ServiceName}/api/client-registry-api-key-*
            Action: secretsmanager:GetSecretValue

          - Effect: Allow
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:policy/${PreviewStacksPrefix}-api-*
            Action:
              - iam:CreatePolicy
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - lambda.amazonaws.com
                  - states.amazonaws.com
              ArnLikeIfExists:
                iam:AssociatedResourceARN:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PreviewStacksPrefix}-api-*
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine*

          - Effect: Allow
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${PreviewStacksPrefix}-api-*
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:TagRole
              - iam:UntagRole
              - iam:PassRole
              - iam:GetRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:CreatePolicy
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - lambda.amazonaws.com
                  - states.amazonaws.com
              ArnLikeIfExists:
                iam:AssociatedResourceARN:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PreviewStacksPrefix}-api-*
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine*

          - Effect: Allow
            Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${PreviewStacksPrefix}-*-internal-notifications
            Action:
              - sns:ListSubscriptionsByTopic
              - sns:GetTopicAttributes
              - sns:CreateTopic
              - sns:DeleteTopic
              - sns:TagResource
              - sns:UntagResource
              - sns:Subscribe
            Condition:
              StringEqualsIfExists:
                Endpoint: !Ref NotificationsEmail
                Protocol: email

          - Effect: Allow
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PreviewStacksPrefix}-api-*
            Action:
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:GetFunction
              - lambda:TagResource
              - lambda:UntagResource
              - lambda:AddPermission
              - lambda:RemovePermission
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
              - lambda:ListTags
            Condition:
              StringEqualsIfExists:
                lambda:Principal: apigateway.amazonaws.com

          - Effect: Allow
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ServiceName}/${PreviewStacksPrefix}/${PreviewStacksPrefix}-*/api*:log-stream:*
            Action:
              - logs:TagResource
              - logs:CreateLogGroup
              - logs:DeleteLogGroup
              - logs:PutRetentionPolicy
              - logs:DeleteDataProtectionPolicy
              - logs:GetDataProtectionPolicy
              - logs:PutDataProtectionPolicy
              - logs:CreateLogDelivery
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups

          - Effect: Allow
            Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
            Action: states:DescribeStateMachine

          - Effect: Allow
            Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
            Action:
              - states:TagResource
              - states:UntagResource
              - states:CreateStateMachine
              - states:DeleteStateMachine
              - states:UpdateStateMachine
            Condition:
              StringLike:
                aws:ResourceTag/aws:cloudformation:stack-name: !Sub ${PreviewStacksPrefix}-api-*

          - Effect: Allow
            Resource:
              - !Sub arn:aws:apigateway:${AWS::Region}::/tags/*
              - !Sub arn:aws:apigateway:${AWS::Region}::/restapis
              - !Sub arn:aws:apigateway:${AWS::Region}::/restapis/*
            Action:
              - apigateway:GET
              - apigateway:PUT
              - apigateway:POST
              - apigateway:PATCH
              - apigateway:DELETE
              - apigateway:TagResource
              - apigateway:UntagResource
              - apigateway:UpdateRestApiPolicy
            Condition:
              StringLikeIfExists:
                aws:RequestTag/aws:cloudformation:stack-name: !Sub ${PreviewStacksPrefix}-api-*

  CognitoDeploymentPolicy:
    # checkov:skip=CKV_AWS_109:Ensure IAM policies does not allow permissions management without constraints
    # checkov:skip=CKV_AWS_111:Ensure IAM policies does not allow write access without constraints
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles: [ !Ref GitHubActionsRole ]
      ManagedPolicyName: DeployCognito
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: "*"
            Action: cognito-idp:CreateUserPool

          - Effect: Allow
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::Region}_*
            Action:
              - cognito-idp:DeleteUserPool
              - cognito-idp:CreateUserPoolClient
              - cognito-idp:DeleteUserPoolClient
              - cognito-idp:SetUserPoolMfaConfig
              - cognito-idp:UpdateUserPool
              - cognito-idp:ListTagsForResource

          - Effect: Allow
            Resource: "*"
            Action:
              - kms:CreateKey
              - kms:DescribeKey
              - kms:PutKeyPolicy
              - kms:TagResource
              - kms:CreateGrant
              - kms:ScheduleKeyDeletion
            Condition:
              StringLikeIfExists:
                aws:RequestTag/aws:cloudformation:stack-name: !Sub ${PreviewStacksPrefix}-cognito-*
                aws:ResourceTag/aws:cloudformation:stack-name: !Sub ${PreviewStacksPrefix}-cognito-*
              StringEqualsIfExists:
                kms:KeySpec: SYMMETRIC_DEFAULT
                kms:KeyUsage: ENCRYPT_DECRYPT

          - Effect: Allow
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${PreviewStacksPrefix}-cognito-*
            Action:
              - iam:GetRole
              - iam:TagRole
              - iam:UntagRole
              - iam:PassRole
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRolePolicy
              - iam:PutRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:DeleteRolePolicy
            Condition:
              StringEqualsIfExists:
                iam:PassedToService: lambda.amazonaws.com
              ArnLikeIfExists:
                iam:AssociatedResourceARN: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PreviewStacksPrefix}-cognito-*

          - Effect: Allow
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PreviewStacksPrefix}-cognito-*
            Action:
              - lambda:ListTags
              - lambda:TagResource
              - lambda:GetFunction
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:AddPermission
              - lambda:RemovePermission
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration

          - Effect: Allow
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${ServiceName}/cognito/notify-api-key-*
            Action: secretsmanager:GetSecretValue

  DynamoDBDeploymentPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles: [ !Ref GitHubActionsRole ]
      ManagedPolicyName: DeployDynamoDB
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PreviewStacksPrefix}-*
            Action:
              - dynamodb:DescribeTable
              - dynamodb:CreateTable
              - dynamodb:DeleteTable
              - dynamodb:UpdateContinuousBackups
              - dynamodb:DescribeContinuousBackups

          - Effect: Allow
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PreviewStacksPrefix}-*-sessions
            Action:
              - dynamodb:UpdateTimeToLive
              - dynamodb:DescribeTimeToLive

  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList: [ sts.amazonaws.com ]
      ThumbprintList: [ 6938fd4d98bab03faadb97b34396831e3780aea1 ]

  GitHubDeploymentArtifactsBucket:
    # checkov:skip=CKV_AWS_18:Ensure the S3 bucket has access logging enabled
    # checkov:skip=CKV_AWS_21:Ensure the S3 bucket has versioning enabled
    # checkov:skip=GDS_AWS_3:Check that all S3 buckets have corresponding bucket policies
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  GitHubDeploymentArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GitHubDeploymentArtifactsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: !Sub arn:aws:s3:::${GitHubDeploymentArtifactsBucket}
            Action: s3:ListBucket
            Principal:
              Federated: !Ref GitHubOIDCProvider

  CloudWatchLogsResourcePolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: PreviewStacksLogDelivery
      PolicyDocument:
        Fn::ToJsonString:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ServiceName}/${PreviewStacksPrefix}/*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ServiceName}/dev/*
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Principal:
              Service: delivery.logs.amazonaws.com
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  FrontendContainerImageRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}/frontend
      ImageTagMutability: IMMUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: KMS
      LifecyclePolicy:
        RegistryId: !Ref AWS::AccountId
        LifecyclePolicyText:
          Fn::ToJsonString:
            rules:
              - rulePriority: 1
                description: Keep images pushed in the last 5 days
                selection:
                  tagStatus: any
                  countType: sinceImagePushed
                  countUnit: days
                  countNumber: 14
                action:
                  type: expire

Outputs:
  DeploymentRoleARN:
    Value: !GetAtt GitHubActionsRole.Arn
  DeploymentArtifactsBucket:
    Value: !Ref GitHubDeploymentArtifactsBucket
  FrontendContainerImageRepository:
    Value: !Ref FrontendContainerImageRepository
  GitHubIdentityProviderARN:
    Value: !Ref GitHubOIDCProvider
    Export:
      Name: GitHubIdentityProviderArn
