AWSTemplateFormatVersion: "2010-09-09"
Description: Deployment pipelines for the Admin Tool

Parameters:
  # Template reference https://github.com/alphagov/di-devplatform-deploy
  TemplateStorageBucket:
    Type: String
    Default: https://template-storage-templatebucket-1upzyw6v9cs42.s3.amazonaws.com
  ExportNamePrefix:
    Type: String
    Default: secure-pipelines
    AllowedPattern: ^.*[^-]$
    Description: Prefix to use when importing or exporting values
  StackNamePrefix:
    Type: String
    Default: self-service
    AllowedPattern: ^.*[^-]$
    MaxLength: 14
    Description: Prefix applied to the deployed application stack names
  Environment:
    Type: String
  NextAccount:
    Type: String
    Default: ""
  GitHubRepositoryName:
    Type: String
    Default: di-onboarding-self-service-experience
  SigningProfileARN:
    Type: String
  SigningProfileVersionARN:
    Type: String
  ContainerSigningKeyARN:
    Type: String
    Default: none
  APISourceBucketARN:
    Type: String
    Default: none
  CognitoSourceBucketARN:
    Type: String
    Default: none
  DynamoDBSourceBucketARN:
    Type: String
    Default: none
  FrontendSourceBucketARN:
    Type: String
    Default: none

Conditions:
  PromotionEnabled: !Not [ !Equals [ !Ref NextAccount, "" ] ]
  APISourceBucket: !Not [ !Equals [ !Ref APISourceBucketARN, "none" ] ]
  CognitoSourceBucket: !Not [ !Equals [ !Ref CognitoSourceBucketARN, "none" ] ]
  DynamoDBSourceBucket: !Not [ !Equals [ !Ref DynamoDBSourceBucketARN, "none" ] ]
  FrontendSourceBucket: !Not [ !Equals [ !Ref FrontendSourceBucketARN, "none" ] ]
  CreateFrontendECRRepo: !Not [ !Condition FrontendSourceBucket ]
  IsFinalAccount: !Not [ !Condition PromotionEnabled ]

Resources:
  APIDeployer:
    Type: AWS::CloudFormation::Stack
    DependsOn: DynamoDBDeployer
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/sam-deploy-pipeline/template.yaml
      Tags:
        - Key: System
          Value: Self-Service
        - Key: Service
          Value: Backend
        - Key: sse:deployment-source
          Value: secure-pipelines
      Parameters:
        Environment: !Ref Environment
        SAMStackName: !Sub ${StackNamePrefix}-api
        TruncatedPipelineStackName: !Sub ${StackNamePrefix}-api
        SigningProfileVersionArn: !Ref SigningProfileVersionARN
        SigningProfileArn: !Ref SigningProfileARN
        # TODO confirm the API stacks needs this param
        VpcStackName:
          Fn::ImportValue: !Sub ${ExportNamePrefix}-VPCStackName
        BuildNotificationStackName:
          Fn::ImportValue: !Sub ${ExportNamePrefix}-SlackNotificationsStackName
        SlackNotificationType: !If [ IsFinalAccount, All, Failures ]
        ArtifactSourceBucketArn: !Ref APISourceBucketARN
        GitHubRepositoryName: !If [ APISourceBucket, "none", !Ref GitHubRepositoryName ]
        AllowedAccounts: !Ref NextAccount
        IncludePromotion: !If [ PromotionEnabled, "Yes", "No" ]
        AccessLogsCustomBucketNameEnabled: "No"
        ProgrammaticPermissionsBoundary: "True"
        AllowedServiceOne: Lambda
        AllowedServiceTwo: DynamoDB
        AllowedServiceThree: SNS
        AllowedServiceFour: StepFunctions

  CognitoDeployer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/sam-deploy-pipeline/template.yaml
      Tags:
        - Key: System
          Value: Self-Service
        - Key: Service
          Value: Authentication
        - Key: sse:deployment-source
          Value: secure-pipelines
      Parameters:
        Environment: !Ref Environment
        SAMStackName: !Sub ${StackNamePrefix}-cognito
        TruncatedPipelineStackName: !Sub ${StackNamePrefix}-cognito
        SigningProfileVersionArn: !Ref SigningProfileVersionARN
        SigningProfileArn: !Ref SigningProfileARN
        BuildNotificationStackName:
          Fn::ImportValue: !Sub ${ExportNamePrefix}-SlackNotificationsStackName
        SlackNotificationType: !If [ IsFinalAccount, All, Failures ]
        ArtifactSourceBucketArn: !Ref CognitoSourceBucketARN
        GitHubRepositoryName: !If [ CognitoSourceBucket, "none", !Ref GitHubRepositoryName ]
        AllowedAccounts: !Ref NextAccount
        IncludePromotion: !If [ PromotionEnabled, "Yes", "No" ]
        AccessLogsCustomBucketNameEnabled: "No"
        ProgrammaticPermissionsBoundary: "True"
        AllowedServiceOne: Cognito
        AllowedServiceTwo: Lambda
        AllowedServiceThree: SNS

  DynamoDBDeployer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/sam-deploy-pipeline/template.yaml
      Tags:
        - Key: System
          Value: Self-Service
        - Key: Service
          Value: Database
        - Key: sse:deployment-source
          Value: secure-pipelines
      Parameters:
        Environment: !Ref Environment
        SAMStackName: !Sub ${StackNamePrefix}-dynamodb
        TruncatedPipelineStackName: !Sub ${StackNamePrefix}-dynamodb
        SigningProfileVersionArn: !Ref SigningProfileVersionARN
        SigningProfileArn: !Ref SigningProfileARN
        BuildNotificationStackName:
          Fn::ImportValue: !Sub ${ExportNamePrefix}-SlackNotificationsStackName
        SlackNotificationType: !If [ IsFinalAccount, All, Failures ]
        ArtifactSourceBucketArn: !Ref DynamoDBSourceBucketARN
        GitHubRepositoryName: !If [ DynamoDBSourceBucket, "none", !Ref GitHubRepositoryName ]
        AllowedAccounts: !Ref NextAccount
        IncludePromotion: !If [ PromotionEnabled, "Yes", "No" ]
        AccessLogsCustomBucketNameEnabled: "No"
        ProgrammaticPermissionsBoundary: "True"
        AllowedServiceOne: DynamoDB

  FrontendDeployer:
    Type: AWS::CloudFormation::Stack
    DependsOn: DynamoDBDeployer
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/sam-deploy-pipeline/template.yaml
      Tags:
        - Key: System
          Value: Self-Service
        - Key: Service
          Value: Frontend
        - Key: sse:deployment-source
          Value: secure-pipelines
      Parameters:
        Environment: !Ref Environment
        SAMStackName: !Sub ${StackNamePrefix}-frontend
        TruncatedPipelineStackName: !Sub ${StackNamePrefix}-frontend
        ContainerSignerKmsKeyArn: !Ref ContainerSigningKeyARN
        SigningProfileVersionArn: !Ref SigningProfileVersionARN
        SigningProfileArn: !Ref SigningProfileARN
        VpcStackName:
          Fn::ImportValue: !Sub ${ExportNamePrefix}-VPCStackName
        BuildNotificationStackName:
          Fn::ImportValue: !Sub ${ExportNamePrefix}-SlackNotificationsStackName
        SlackNotificationType: !If [ IsFinalAccount, All, Failures ]
        ArtifactSourceBucketArn: !Ref FrontendSourceBucketARN
        GitHubRepositoryName: !If [ FrontendSourceBucket, "none", !Ref GitHubRepositoryName ]
        AllowedAccounts: !Ref NextAccount
        IncludePromotion: !If [ PromotionEnabled, "Yes", "No" ]
        AccessLogsCustomBucketNameEnabled: "No"
        ProgrammaticPermissionsBoundary: "True"
        AllowedServiceOne: ECR & ECS

  FrontendECRRepository:
    Type: AWS::CloudFormation::Stack
    Condition: CreateFrontendECRRepo
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/container-image-repository/template.yaml
      Parameters:
        PipelineStackName: !Select [ 1, !Split [ "/", !Ref FrontendDeployer ] ]

Outputs:
  APIPromotionBucket:
    Condition: PromotionEnabled
    Value: !GetAtt APIDeployer.Outputs.ArtifactPromotionBucketArn
  CognitoPromotionBucket:
    Condition: PromotionEnabled
    Value: !GetAtt CognitoDeployer.Outputs.ArtifactPromotionBucketArn
  DynamoDBPromotionBucket:
    Condition: PromotionEnabled
    Value: !GetAtt DynamoDBDeployer.Outputs.ArtifactPromotionBucketArn
  FrontendPromotionBucket:
    Condition: PromotionEnabled
    Value: !GetAtt FrontendDeployer.Outputs.ArtifactPromotionBucketArn
