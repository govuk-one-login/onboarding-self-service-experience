AWSTemplateFormatVersion: "2010-09-09"
Description: DI Self-Service API
Transform: [ AWS::LanguageExtensions, AWS::Serverless-2016-10-31 ]

Parameters:
  Environment:
    Description: "The name of the environment to deploy to."
    Type: "String"
    Default: local
    AllowedValues:
      - "local"
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  DeploymentName:
    Type: String
    MaxLength: 22
    AllowedPattern: ^.*[^-]$
    Default: self-service
    Description: A unique prefix to identify the deployment; used to distinguish variation between ephemeral stacks
  NotificationEmail:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /self-service/api/notifications-email
    Description: Email address to send internal notifications
  PrivateAPI:
    Type: String
    AllowedValues: [ Yes, No ]
    Default: Yes
  PermissionsBoundary:
    Type: String
    Default: ""
  CodeSigningConfigArn:
    Type: String
    Default: ""

Rules:
  DeploymentNameRequired:
    RuleCondition: !Equals [ !Ref Environment, "local" ]
    Assertions:
      - Assert: !Not [ !Equals [ !Ref DeploymentName, "" ] ]
        AssertDescription: >
          Must specify DeploymentName parameter when Environment is "local"

  DeploymentNameMustBeEmpty:
    RuleCondition: !Not [ !Equals [ !Ref Environment, "local" ] ]
    Assertions:
      - Assert: !Equals [ !Ref DeploymentName, "self-service" ] # Confirm the default value is used.
        AssertDescription: >
          Must not specify DeploymentName parameter when Environment is not "local"

Mappings:
  EnvironmentConfiguration:
    local:
      dynatraceLoggingEnabled: false # Local builds do not support dynatrace
      cslsLoggingEnabled: true
      clslSubscriptionFilterArn: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    dev:
      dynatraceLoggingEnabled: true
      cslsLoggingEnabled: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      dynatraceLayerArn: arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_313_2_20250404-043044_with_collector_nodejs:1
      clslSubscriptionFilterArn: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    build:
      dynatraceLoggingEnabled: true
      cslsLoggingEnabled: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      dynatraceLayerArn: arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_313_2_20250404-043044_with_collector_nodejs:1
      clslSubscriptionFilterArn: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    staging:
      dynatraceLoggingEnabled: true
      cslsLoggingEnabled: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      dynatraceLayerArn: arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_313_2_20250404-043044_with_collector_nodejs:1
      clslSubscriptionFilterArn: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    integration:
      dynatraceLoggingEnabled: true
      cslsLoggingEnabled: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      dynatraceLayerArn: arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_311_2_20250307-045250_with_collector_nodejs:1
      clslSubscriptionFilterArn: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    production:
      dynatraceLoggingEnabled: true
      cslsLoggingEnabled: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
      dynatraceLayerArn: arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_313_2_20250404-043044_with_collector_nodejs:1
      clslSubscriptionFilterArn: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    default:
      cslsLoggingEnabled: false
      dynatraceLoggingEnabled: false
      dynatraceSecretArn: placeholder
      clslSubscriptionFilterArn: placeholder
  WafArn:
    Environment:
      local: "/self-service/development/waf-web-acl"
      dev: "/self-service/development/waf-web-acl"
      build: "/self-service/build/waf-web-acl"
      staging: "/self-service/staging/waf-web-acl"
      integration: "/self-service/integration/waf-web-acl"
      production: "/self-service/production/waf-web-acl"

Conditions:
  PrivateAPI: !Equals [ !Ref PrivateAPI, Yes ]
  UseCodeSigning: !Not [ !Equals [ !Ref CodeSigningConfigArn, "" ] ]
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, "" ] ]
  DynatraceLoggingEnabled: !Equals [ !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceLoggingEnabled ], true ]
  CslsLoggingEnabled: !Equals [ !FindInMap [ EnvironmentConfiguration, !Ref Environment, cslsLoggingEnabled ], true ]
  IsLocal: !Equals [ !Ref Environment, "local" ]
  WebAclAssociated:
    !Not [
      !Or [
        !Equals [dev, !Ref Environment],
        !Equals [build, !Ref Environment],
        !Equals [staging, !Ref Environment],
        !Equals [integration, !Ref Environment],
        !Equals [production, !Ref Environment],
      ],
    ]

Globals:
  Function:
    Timeout: 15
    Runtime: nodejs22.x
    PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
    VpcConfig:
      SecurityGroupIds: [ !ImportValue VPC-VPCEndpointsSecurityGroup ]
      SubnetIds: !Split [ ",", !ImportValue VPC-PrivateSubnets ]
    LoggingConfig:
      ApplicationLogLevel: INFO
      LogFormat: JSON
      LogGroup: !Ref LambdaLogsGroup
      SystemLogLevel: INFO
    Layers:
      - !If
        - DynatraceLoggingEnabled
        - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceLayerArn ]
        - !Ref AWS::NoValue
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        AWS_LAMBDA_EXEC_WRAPPER: !If [ DynatraceLoggingEnabled, "/opt/dynatrace", !Ref "AWS::NoValue" ]
        DT_CONNECTION_AUTH_TOKEN: !If
          - DynatraceLoggingEnabled
          - !Sub
            - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}'
            - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
          - !Ref "AWS::NoValue"
        DT_CONNECTION_BASE_URL: !If
          - DynatraceLoggingEnabled
          - !Sub
            - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}'
            - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
          - !Ref "AWS::NoValue"
        DT_CLUSTER_ID: !If
          - DynatraceLoggingEnabled
          - !Sub
            - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}'
            - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
          - !Ref "AWS::NoValue"
        DT_LOG_COLLECTION_AUTH_TOKEN: !If
          - DynatraceLoggingEnabled
          - !Sub
            - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}'
            - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
          - !Ref "AWS::NoValue"
        DT_TENANT: !If
          - DynatraceLoggingEnabled
          - !Sub
            - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}'
            - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
          - !Ref "AWS::NoValue"
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: !If [DynatraceLoggingEnabled, "true", !Ref "AWS::NoValue"]

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W6001
        - W8003

Resources:
  # https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html
  API:
    # checkov:skip=CKV_AWS_120:Ensure API Gateway caching is enabled
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${DeploymentName}-api
      StageName: self-service-api
      TracingEnabled: true
      FailOnWarnings: true
      OpenApiVersion: 3.0.1
      Auth:
        ResourcePolicy: !If
          - PrivateAPI
          - # https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-resource-policies-examples.html#apigateway-resource-policies-source-vpc-example
            CustomStatements:
              - Effect: Allow
                Resource: execute-api:/*
                Action: execute-api:Invoke
                Principal: "*"
                Condition:
                  StringEquals:
                    aws:SourceVpce:
                      Fn::ImportValue: VPC-ExecuteAPIGatewayEndpointID
          - !Ref AWS::NoValue
      EndpointConfiguration:
        Type: !If [ PrivateAPI, PRIVATE, !Ref AWS::NoValue ]
        VpcEndpointIds: !If [ PrivateAPI, [ Fn::ImportValue: VPC-ExecuteAPIGatewayEndpointID ], !Ref AWS::NoValue ]
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: /*
          LoggingLevel: INFO
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt APIAccessLogsGroup.Arn
        Format:
          Fn::ToJsonString:
            path: $context.path
            status: $context.status
            protocol: $context.protocol
            routeKey: $context.routeKey
            requestId: $context.requestId
            requestTime: $context.requestTime
            httpMethod: $context.httpMethod
            responseLength: $context.responseLength
            extendedRequestId: $context.extendedRequestId
      Tags:
        FMSRegionalPolicy: false
        CustomPolicy: true

  LogAuditLogGroup:
    # checkov:skip=CKV_AWS_158:Ensure that CloudWatch Log Group is encrypted by KMS
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "/"
        - - '/onboarding-self-service/backend-api'
          - !If [ IsLocal, !Ref DeploymentName, !Ref AWS::NoValue ]
          - 'audit'
      RetentionInDays: 30

  APIAccessLogsGroup:
    # checkov:skip=CKV_AWS_158:Ensure that CloudWatch Log Group is encrypted by KMS
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "/"
        - - '/aws/api-gateway'
          - 'onboarding-self-service/backend-api'
          - !Sub ${DeploymentName}-api
      RetentionInDays: 30
      DataProtectionPolicy:
        Name: data-protection-policy-api
        Description: Data Protection for Cloudwatch Logs
        Version: '2021-06-01'
        Statement:
          - Sid: audit-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/Address
              - arn:aws:dataprotection::aws:data-identifier/AwsSecretKey
              - arn:aws:dataprotection::aws:data-identifier/OpenSshPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PgpPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PkcsPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PuttyPrivateKey
            Operation:
              Audit:
                FindingsDestination:
                  CloudWatchLogs:
                    LogGroup: !Ref LogAuditLogGroup
          - Sid: redact-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/Address
              - arn:aws:dataprotection::aws:data-identifier/AwsSecretKey
              - arn:aws:dataprotection::aws:data-identifier/OpenSshPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PgpPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PkcsPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PuttyPrivateKey
            Operation:
              Deidentify:
                MaskConfig: { }

  ApiLogCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsLoggingEnabled
    Properties:
      LogGroupName: !Ref APIAccessLogsGroup
      FilterName: "API Gateway logs for Backend API"
      FilterPattern: ""
      DestinationArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, clslSubscriptionFilterArn ]

  LambdaLogsGroup:
    # checkov:skip=CKV_AWS_158:Ensure that CloudWatch Log Group is encrypted by KMS
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "/"
        - - '/aws/lambda'
          - 'onboarding-self-service/backend-api'
          - !If [ IsLocal, !Ref DeploymentName, !Ref AWS::NoValue ]
          - 'all'
      RetentionInDays: 30
      DataProtectionPolicy:
        Name: data-protection-policy-api-lambda
        Description: Data Protection for Cloudwatch Logs
        Version: '2021-06-01'
        Statement:
          - Sid: audit-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/Address
              - arn:aws:dataprotection::aws:data-identifier/AwsSecretKey
              - arn:aws:dataprotection::aws:data-identifier/OpenSshPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PgpPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PkcsPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PuttyPrivateKey
            Operation:
              Audit:
                FindingsDestination:
                  CloudWatchLogs:
                    LogGroup: !Ref LogAuditLogGroup
          - Sid: redact-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/Address
              - arn:aws:dataprotection::aws:data-identifier/AwsSecretKey
              - arn:aws:dataprotection::aws:data-identifier/OpenSshPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PgpPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PkcsPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PuttyPrivateKey
            Operation:
              Deidentify:
                MaskConfig: { }

  LambdaLogCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsLoggingEnabled
    Properties:
      LogGroupName: !Ref LambdaLogsGroup
      FilterName: "Lambda logs for Backend API"
      FilterPattern: ""
      DestinationArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, clslSubscriptionFilterArn ]

  #--- Users ---#

  EnvironmentVariablesEncryptionKey:
    # checkov:skip=CKV_AWS_7:Ensure rotation for customer created CMKs is enabled
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Resource: "*"
            Action: kms:*
            Principal:
              AWS: !Ref AWS::AccountId
          - Effect: Allow
            Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
            Action:
              - kms:ListAliases
              - kms:CreateGrant
              - kms:Encrypt
              - kms:Decrypt
            Principal:
              Service: lambda.amazonaws.com
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function/*

  GetUserFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/get-user.getUserHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /get-user
            Method: POST

  PutUserFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/put-user.putUserHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /put-user
            Method: POST

  UpdateUserFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/update-user.updateUserHandler
      Description: Updates user data in DynamoDB
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /update-user
            Method: POST

  #--- Services ---#

  GetServicesFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/get-services.getServicesHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /get-services/{userId}
            Method: GET

  GetSessionCountFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/get-session-count.getSessionCountHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-SessionsTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-SessionsTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /get-session-count/{userEmail}
            Method: GET

  GlobalSignOutFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/global-sign-out.globalSignOutHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-SessionsTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-SessionsTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /global-sign-out/{userEmail}
            Method: GET

  PutServiceFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/put-service.putServiceHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  #--- Service clients ---#

  GetServiceClientsFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/get-service-clients.getServiceClientsHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /get-service-clients/{serviceId}
            Method: GET

  PutServiceClientFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/put-service-client.putServiceClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  UpdateServiceFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          # AWS SDK v3 dependencies are already included in the lambda runtime
          - "@aws-sdk/*"
    Properties:
      Handler: src/handlers/dynamodb/update-service.updateServiceHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  UpdateServiceClientFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/update-service-client.updateServiceClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  #--- Service users ---#

  PutServiceUserFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/put-service-user.putServiceUserHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  #--- Auth clients ---#

  RegisterAuthClientFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Description: Assumes a cross-account role and invokes the Auth register Lambda
      Handler: src/handlers/auth/register-client.registerClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      VpcConfig:
        SubnetIds: !Split [ ",", !ImportValue VPC-ProtectedSubnets ]
      Environment:
        Variables:
          AUTH_REGISTRATION_BASE_URL: "{{resolve:ssm:/self-service/api/auth-base-url}}"
          AUTH_API_KEY: "{{resolve:secretsmanager:/self-service/api/client-registry-api-key}}"
      KmsKeyArn: !GetAtt EnvironmentVariablesEncryptionKey.Arn

  UpdateAuthClientFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Description: Updates a client using an HTTP endpoint
      Handler: src/handlers/auth/update-client.updateClientInRegistryHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      VpcConfig:
        SubnetIds: !Split [ ",", !ImportValue VPC-ProtectedSubnets ]
      Environment:
        Variables:
          AUTH_REGISTRATION_BASE_URL: "{{resolve:ssm:/self-service/api/auth-base-url}}"
          AUTH_API_KEY: "{{resolve:secretsmanager:/self-service/api/client-registry-api-key}}"
      KmsKeyArn: !GetAtt EnvironmentVariablesEncryptionKey.Arn

  #--- Step Functions ---#

  NewServiceHandler:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/step-functions/new-service.newServiceHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:StartSyncExecution
              Resource: !Ref NewServiceStepFunction
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref NewServiceStepFunction
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /new-service
            Method: POST

  NewClientHandler:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/step-functions/new-client.newClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:StartSyncExecution
              Resource: !Ref NewClientStepFunction
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref NewClientStepFunction
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /new-client
            Method: POST

  UpdateClientHandler:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/step-functions/update-client.doUpdateClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:StartSyncExecution
              Resource: !Ref UpdateClientStepFunction
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref UpdateClientStepFunction
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /update-client
            Method: POST

  UpdateServiceHandler:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/step-functions/update-service.doUpdateServiceHandler
      Description: Updates service data in DynamoDB and Client Registry
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:StartSyncExecution
              Resource: !Ref UpdateServiceStepFunction
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref UpdateServiceStepFunction
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /update-service
            Method: POST

  KMSDecryptAccessPolicy:
    # checkov:skip=CKV_AWS_111:Ensure IAM policies does not allow write access without constraints
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for decrypting KMS
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: "*"

  DynatraceSecretsAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for accessing Dynatrace secrets
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
            Action:
              - secretsmanager:GetSecretValue
          - Effect: Allow
            Resource: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
            Action:
              - secretsmanager:GetSecretValue
          - Effect: Allow
            Action:
              - secretsmanager:ListSecrets
            Resource: 'arn:aws:secretsmanager:eu-west-2:216552277552:secret:*'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource: 'arn:aws:kms:eu-west-2:216552277552:key/*'


  SendSQSMessageToTxMAHandler:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/logging/sqs-service.sendSQSMessageToTxMAHandler
      Description: Sends a message to the TxMA SQS
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AmazonSQSFullAccess
        - !Ref KMSDecryptAccessPolicy
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          QUEUEURL: !Join [ '', [!Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/', !Join ["frontend", !Split ["api", !Sub '${AWS::StackName}' ] ], "-AuditEventQueue"]]
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /txma-logging
            Method: POST

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StepFunctionsLogGroup}
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt PutServiceFunction.Arn
                  - !GetAtt PutServiceUserFunction.Arn
                  - !GetAtt PutServiceClientFunction.Arn
                  - !GetAtt UpdateServiceFunction.Arn
                  - !GetAtt UpdateServiceClientFunction.Arn
                  - !GetAtt RegisterAuthClientFunction.Arn
                  - !GetAtt UpdateAuthClientFunction.Arn
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: "*"

  NewServiceStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: state-machines/new-service.json
      DefinitionSubstitutions:
        PutServiceFunctionArn: !GetAtt PutServiceFunction.Arn
        PutServiceUserFunctionArn: !GetAtt PutServiceUserFunction.Arn
      Tracing:
        Enabled: true

  NewClientStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: state-machines/new-client.json
      DefinitionSubstitutions:
        RegisterClientFunctionArn: !GetAtt RegisterAuthClientFunction.Arn
        PutServiceClientFunctionArn: !GetAtt PutServiceClientFunction.Arn
      Tracing:
        Enabled: true

  UpdateClientStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: state-machines/update-client.json
      DefinitionSubstitutions:
        UpdateClientInRegistryFunctionArn: !GetAtt UpdateAuthClientFunction.Arn
        UpdateServiceClientFunctionArn: !GetAtt UpdateServiceClientFunction.Arn
      Tracing:
        Enabled: true

  UpdateServiceStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: state-machines/update-service.json
      DefinitionSubstitutions:
        UpdateClientInRegistryFunctionArn: !GetAtt UpdateAuthClientFunction.Arn
        UpdateServiceFunctionArn: !GetAtt UpdateServiceFunction.Arn
      Tracing:
        Enabled: true

  StepFunctionsLogGroup:
    # checkov:skip=CKV_AWS_158:Ensure that CloudWatch Log Group is encrypted by KMS
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "/"
        - - '/aws/stepfunction'
          - 'onboarding-self-service/backend-api'
          - !If [ IsLocal, !Ref DeploymentName, !Ref AWS::NoValue ]
          - 'all'
      RetentionInDays: 30
      DataProtectionPolicy:
        Name: data-protection-policy-api-step-functions
        Description: Data Protection for Cloudwatch Logs
        Version: '2021-06-01'
        Statement:
          - Sid: audit-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/Address
              - arn:aws:dataprotection::aws:data-identifier/AwsSecretKey
              - arn:aws:dataprotection::aws:data-identifier/OpenSshPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PgpPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PkcsPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PuttyPrivateKey
            Operation:
              Audit:
                FindingsDestination:
                  CloudWatchLogs:
                    LogGroup: !Ref LogAuditLogGroup
          - Sid: redact-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/Address
              - arn:aws:dataprotection::aws:data-identifier/AwsSecretKey
              - arn:aws:dataprotection::aws:data-identifier/OpenSshPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PgpPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PkcsPrivateKey
              - arn:aws:dataprotection::aws:data-identifier/PuttyPrivateKey
            Operation:
              Deidentify:
                MaskConfig: { }

  StepFunctionLogCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsLoggingEnabled
    Properties:
      LogGroupName: !Ref StepFunctionsLogGroup
      FilterName: "Step Functions logs for Backend API"
      FilterPattern: ""
      DestinationArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, clslSubscriptionFilterArn ]

  #--- Notifications ---#

  NotificationsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DI Admin Tool Internal
      TopicName: !Sub ${DeploymentName}-internal-notifications
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  #--- DynamoDB Functions ---#
  GetDynamoDBEntriesFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/dynamo-db-service.getDynamoDBEntriesHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /get-dynamodb-entries/{userEmail}
            Method: GET

  DeleteDynamoDBClientEntriesFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/dynamo-db-service.deleteDynamoDBClientEntriesHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /delete-dynamodb-client-entries
            Method: POST

  DeleteDynamoDBServiceEntriesFunction:
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/dynamodb/dynamo-db-service.deleteDynamoDBServiceEntriesHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          TABLE:
            Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /delete-dynamodb-service-entries
            Method: POST

  ApiGatewayWebACLAssociation:
    Condition: WebAclAssociated
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      WebACLArn: !Sub
        - "{{resolve:ssm:${WafArnParam}}}"
        - WafArnParam: !FindInMap [ WafArn, Environment, !Ref Environment ]
      ResourceArn: !Sub
        - 'arn:aws:apigateway:${AWS::Region}::/restapis/${ResourceArn}/stages/${API.Stage}'
        - ResourceArn: !Ref API


  ## Start Code Block Function ##

  CodeBlockHandler:
   # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    # checkov:skip=CKV_AWS_173:Check encryption settings for Lambda environmental variable
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
        External:
          - "@aws-sdk/*" # AWS SDK v3 dependencies are already included in the lambda runtime
    Properties:
      Handler: src/handlers/code-block/code-block-handler.handler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXrayWriteOnlyAccess
        - !Ref CodeRequestBlockTableCrudAccessPolicy
        - !If [DynatraceLoggingEnabled, !Ref DynatraceSecretsAccessPolicy, !Ref "AWS::NoValue"]
      Environment:
        Variables:
          CODE_BLOCK_TABLE_NAME:
             Fn::ImportValue: 
                !Sub ${DeploymentName}-CodeRequestBlockTableName
      Events:
        getCodeBlock:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /code-block/get/
            Method: POST
        putCodeBlock:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /code-block/put/
            Method: POST
        deleteCodeBlock:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /code-block/delete/
            Method: POST

  CodeRequestBlockTableCrudAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowCodeRequestBlockTableReadAccess
            Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:Get*
            Resource: 
              Fn::ImportValue: 
                !Sub ${DeploymentName}-CodeRequestBlockTableArn
          - Sid: AllowCodeRequestBlockTableDecryption
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              Fn::ImportValue: 
                  !Sub ${DeploymentName}-CodeRequestBlockEncryptionKeyArn
          - Sid: AllowCodeRequestBlockTableWriteAccess
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: 
              Fn::ImportValue: 
                !Sub ${DeploymentName}-CodeRequestBlockTableArn
          - Sid: AllowCodeRequestBlockTableEncryption
            Effect: Allow
            Action:
              - kms:Encrypt
            Resource: 
              Fn::ImportValue: 
                  !Sub ${DeploymentName}-CodeRequestBlockEncryptionKeyArn
          - Sid: CodeRequestBlockTableDeleteAccess
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource:  
              Fn::ImportValue: 
                !Sub ${DeploymentName}-CodeRequestBlockTableArn

  ## End Code Block Function ##

Outputs:
  # SAM Serverless Function implicit API resources | Invoking private APIs
  # https://github.com/aws/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-api-test-invoke-url.html#apigateway-private-api-route53-alias
  APIBaseURL:
    Value: !Sub
      - https://${EndpointID}.execute-api.${AWS::Region}.amazonaws.com/${API.Stage}
      - EndpointID: !Join
          - "-"
          - - !Ref API
            - !If [ PrivateAPI, Fn::ImportValue: VPC-ExecuteAPIGatewayEndpointID, !Ref AWS::NoValue ]
    Export:
      Name: !Sub ${DeploymentName}-API-BaseURL
