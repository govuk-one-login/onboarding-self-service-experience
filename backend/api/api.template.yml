AWSTemplateFormatVersion: "2010-09-09"
Description: DI Self-Service API
Transform: AWS::Serverless-2016-10-31

Parameters:
  AuthRegistrationBaseUrl:
    Type: String
    Default: https://oidc.integration.account.gov.uk
    Description: API Gateway endpoint for client registration
  NotificationEmail:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /self-service/api/notifications-email
    Description: Email address to send internal notifications
  LogGroupPrefix:
    Type: String
    AllowedPattern: ^.*[^\/]$
    Default: /aws/vendedlogs
  DeploymentName:
    Type: String
    MaxLength: 28
    AllowedPattern: ^.*[^-]$
    Default: self-service
    Description: A unique prefix to identify the deployment; used when importing or exporting values from related stacks
  PermissionsBoundary:
    Type: String
    Default: ""
  CodeSigningConfigArn:
    Type: String
    Default: ""

Conditions:
  UseCodeSigning: !Not [ !Equals [ !Ref CodeSigningConfigArn, "" ] ]
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, "" ] ]

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs18.x
    PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps

Resources:

  SelfServiceApi:
    # checkov:skip=CKV_AWS_95: "Ensure API Gateway V2 has Access Logging enabled"
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: true
      StageName: self-service-api

  #--- Users ---#

  GetUserFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/get-user.getUserHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /get-user
            Method: POST

  PutUserFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/put-user.putUserHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /put-user
            Method: POST

  UpdateUserFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/update-user.updateUserHandler
      Description: Updates user data in DynamoDB
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /update-user
            Method: POST

  #--- Services ---#

  GetServicesFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/get-services.getServicesHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /get-services/{userId}
            Method: GET

  PutServiceFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/put-service.putServiceHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  #--- Service clients ---#

  GetServiceClientsFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/get-service-clients.getServiceClientsHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /get-service-clients/{serviceId}
            Method: GET

  PutServiceClientFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/put-service-client.putServiceClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  UpdateServiceClientFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/update-service-client.updateServiceClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  #--- Service users ---#

  PutServiceUserFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/dynamodb/put-service-user.putServiceUserHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName
      Environment:
        Variables:
          TABLE:
              Fn::ImportValue: !Sub ${DeploymentName}-DynamoDB-DataTableName

  #--- Auth clients ---#

  RegisterAuthClientFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/auth/register-client.registerClientHandler
      Description: Assumes a cross-account role and invokes the Auth register Lambda
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Environment:
        Variables:
          AUTH_REGISTRATION_BASE_URL: !Ref AuthRegistrationBaseUrl
          AUTH_API_KEY: "{{resolve:secretsmanager:/self-service/api/auth-api-key}}"

  UpdateAuthClientFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/auth/update-client.updateClientInRegistryHandler
      Description: Updates a client using an HTTP endpoint
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Environment:
        Variables:
          AUTH_REGISTRATION_BASE_URL: !Ref AuthRegistrationBaseUrl
          AUTH_API_KEY: "{{resolve:secretsmanager:/self-service/api/auth-api-key}}"

  #--- Step Functions ---#

  NewServiceHandler:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/step-functions/new-service.newServiceHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref NewServiceStepFunction
      Policies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: states:StartSyncExecution
            Resource: !Ref NewServiceStepFunction
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /new-service
            Method: POST

  NewClientHandler:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/step-functions/new-client.newClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref NewClientStepFunction
      Policies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: states:StartSyncExecution
            Resource: !Ref NewClientStepFunction
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /new-client
            Method: POST

  UpdateClientHandler:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/step-functions/update-client.doUpdateClientHandler
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref UpdateClientStepFunction
      Policies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: states:StartSyncExecution
            Resource: !Ref UpdateClientStepFunction
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /update-client
            Method: POST

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StepFunctionsLogGroup}
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt PutServiceFunction.Arn
                  - !GetAtt PutServiceUserFunction.Arn
                  - !GetAtt PutServiceClientFunction.Arn
                  - !GetAtt UpdateServiceClientFunction.Arn
                  - !GetAtt RegisterAuthClientFunction.Arn
                  - !GetAtt UpdateAuthClientFunction.Arn

  NewServiceStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: state-machines/new-service.json
      DefinitionSubstitutions:
        PutServiceFunctionArn: !GetAtt PutServiceFunction.Arn
        PutServiceUserFunctionArn: !GetAtt PutServiceUserFunction.Arn

  NewClientStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: state-machines/new-client.json
      DefinitionSubstitutions:
        RegisterClientFunctionArn: !GetAtt RegisterAuthClientFunction.Arn
        PutServiceClientFunctionArn: !GetAtt PutServiceClientFunction.Arn

  UpdateClientStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: state-machines/update-client.json
      DefinitionSubstitutions:
        UpdateClientInRegistryFunctionArn: !GetAtt UpdateAuthClientFunction.Arn
        UpdateServiceClientFunctionArn: !GetAtt UpdateServiceClientFunction.Arn

  StepFunctionsLogGroup:
    # checkov:skip=CKV_AWS_158: "Ensure that CloudWatch Log Group is encrypted by KMS"
    # checkov:skip=CKV_AWS_66: "Ensure that CloudWatch Log Group specifies retention days"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${LogGroupPrefix}/${DeploymentName}/api/step-functions

  #--- Notifications ---#

  PrivateBetaNotificationFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_116: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Handler: backend/api/src/handlers/notifications/send-private-beta-notification.privateBetaRequestHandler
      Description: Publish a message to the private beta request notification topic
      CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationsSnsTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationsSnsTopic.TopicName
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref SelfServiceApi
            Path: /send-private-beta-request-notification
            Method: POST

  NotificationsSnsTopic:
    # checkov:skip=CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted"
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DI Admin Tool
      TopicName: !Sub ${DeploymentName}-internal-notifications
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

Outputs:
  # SAM Serverless Function implicit API resources
  # https://github.com/aws/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  APIBaseURL:
    Value: !Sub ${SelfServiceApi.ApiEndpoint}/${SelfServiceApi.Stage}
    Export:
      Name: !Sub ${DeploymentName}-API-BaseURL
